# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L6lVxNbVpXUWUUPOstzCz4j6KcFZ4gjb
"""

################# installing of libraries ######################################

!pip install tensorflow
!pip install torch torchvision scikit-learn
!pip install scikeras


################ load packages #################################################

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense
from keras.layers import RepeatVector
from keras.layers import TimeDistributed
from sklearn import preprocessing
from sklearn.model_selection import GridSearchCV
from scikeras.wrappers import KerasClassifier



######################### input data and pre-processing  #########################


# Loading Data
sample_df=pd.read_csv('File_name.csv')
X_original = sample_df.drop('Label', axis=1)
y_original = sample_df['Label']

# Encoding of features and class Labels
features = pd.DataFrame(X_original)
labels = pd.DataFrame(y_original)
X_feat = features.values

# Apply standard scaler to all features
scaler = StandardScaler()
X_feat_scaled = scaler.fit_transform(X_feat)

# Apply label encoder to all labels
y_labels=labels.values
label_encoder = preprocessing.LabelEncoder()
yL= label_encoder.fit_transform(y_labels)

# Final X (feature) and y (class-label) matrices
y = yL
X = X_feat_scaled



###############defining classifier model and applying GridSearchCV ##############


num_classes = len(np.unique(y))

def classifier_model(dense1,dense2):

    model = Sequential()
    model.add(layers.Dense(dense1, activation="relu", input_shape=(X.shape[1],)))
    model.add(layers.Dense(dense2, activation="relu", input_shape=(X.shape[1],)))

    model.add(layers.Dense(num_classes, activation="softmax"))
    model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])
    return model


# Fitting the model and getting the best estimator
model=KerasClassifier(build_fn=classifier_model,dense1=[20,30,35,40],dense2=[5,10,15,25])

# Defining parameters
params={

        'dense1':[20,30,35,40],
        'dense2':[5,10,15,25]
        }

gs=GridSearchCV(estimator=model, param_grid=params, cv=5,scoring='accuracy')

# now fit the dataset to the GridSearchCV object.
gs_result = gs.fit(X, y)
print("Best: %f using %s" % (gs_result.best_score_, gs_result.best_params_))